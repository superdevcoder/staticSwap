{"version":3,"sources":["views/Ifos/components/IfoFoldableCard/types.ts","views/Ifos/components/Hero.tsx","views/Ifos/hooks/helpers.ts","views/Ifos/hooks/v2/useGetPublicIfoData.ts","views/Ifos/hooks/useIfoAllowance.ts","views/Ifos/hooks/v2/useGetWalletIfoData.ts","views/Ifos/components/IfoFoldableCard/IfoPoolCard/PercentageOfTotal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/GetLpModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos/components/IfoFoldableCard/Timer.tsx","views/Ifos/components/IfoFoldableCard/Achievement.tsx","views/Ifos/hooks/useIfoApprove.ts","views/Ifos/components/IfoFoldableCard/index.tsx","views/Ifos/components/IfoLayout.tsx","views/Ifos/components/IfoSteps.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/components/IfoCardV2Data.tsx","views/Ifos/hooks/v1/useGetPublicIfoData.ts","views/Ifos/hooks/v1/useGetWalletIfoData.ts","views/Ifos/components/IfoCardV1Data.tsx","views/Ifos/PastIfo.tsx","views/Ifos/index.tsx","components/TokenImage/index.tsx","views/Profile/components/ApproveConfirmButtons.tsx","hooks/useApproveConfirmTransaction.ts","utils/getTimePeriods.ts","../node_modules/lodash/every.js","../node_modules/lodash/_arrayEvery.js","../node_modules/lodash/_baseEvery.js"],"names":["EnableStatus","StyledHero","styled","div","CurtainBottom","theme","isDark","Hero","t","useTranslation","mb","Container","as","scale","color","bold","fontSize","getStatus","currentBlock","startBlock","endBlock","formatPool","pool","raisingAmountPool","BigNumber","toString","BIG_ZERO","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","fastRefresh","useRefresh","useState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","state","setState","useBlock","fetchIfoData","useCallback","a","ifoCalls","name","params","multicallv2","ifoV2Abi","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","totalBlocks","prev","BSC_BLOCK_TIME","useEffect","currencyPriceInUSD","useIfoAllowance","tokenContract","spenderAddress","dependency","account","useWeb3React","allowance","setAllowance","res","console","error","fetch","useGetWalletIfoData","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","contract","useIfoV2Contract","currencyContract","useERC20","getAddress","map","method","userInfo","amounts","prevState","setPendingTx","poolId","setIsClaimed","PercentageOfTotal","userAmount","totalAmount","props","percentOfUserDisplay","isGreaterThan","times","toLocaleString","undefined","maximumFractionDigits","num","SkeletonCardActions","height","SkeletonCardTokens","justifyContent","alignItems","variant","width","mr","SkeletonCardDetails","TokenSection","primaryToken","secondaryToken","children","TokenImage","token","CakeBnbTokenSection","tokens","mavr","wbnb","Label","textTransform","Value","style","wordBreak","IfoCardTokens","publicIfoData","walletIfoData","hasProfile","isLoading","onApprove","enableStatus","useTooltip","placement","targetRef","tooltip","tooltipVisible","publicPoolCharacteristics","userPoolCharacteristics","distributionRatio","pb","textAlign","saleAmount","pl","ratio","ENABLED","mt","onClick","IS_ENABLING","endIcon","spin","getBalanceNumber","decimals","isEqualTo","flexDirection","ml","ref","display","marginLeft","multiplierValues","gasPrice","parseUnits","ContributeModal","userCurrencyBalance","onDismiss","onSuccess","value","setValue","callWithGasPrice","useCallWithGasPrice","raisingTokenContract","valueWithTokenDecimals","DEFAULT_TOKEN_DECIMAL","useApproveConfirmTransaction","onRequiresApproval","response","currentAllowance","gt","ethers","constants","MaxUint256","onConfirm","PoolIds","receipt","transactionHash","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","maximumLpCommitable","minus","isLessThanOrEqualTo","title","maxWidth","getBalanceAmount","flexGrow","currencyValue","toFixed","onUserInput","isWarning","balance","multiplierValue","index","length","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","isNaN","eq","GetLpModal","src","split","toLocaleLowerCase","margin","Link","external","href","BASE_ADD_LIQUIDITY_URL","minWidth","ContributeButton","toastSuccess","useToast","useTokenBalance","handleContributeSuccess","amount","txHash","Promise","all","Toast","useModal","onPresentContributeModal","onPresentGetLpModal","isDisabled","isGreaterThanOrEqualTo","disabled","ClaimButton","ifoVersion","toastError","isPending","handleClaim","harvest","tx","wait","harvestPool","IfoCardActions","version","ConnectWalletButton","FooterEntry","label","small","IfoCardDetails","poolCharacteristic","maxLpTokens","totalCommittedPercent","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","formatNumber","paddingTop","raiseAmount","cakeToBurn","tokenOfferingPrice","cardConfig","SmallCard","config","Timer","countdownToUse","timeUntil","getTimePeriods","suffix","toLowerCase","animation","day","days","hour","hours","minute","minutes","getBscScanLink","target","rel","MIN_DOLLAR_FOR_ACHIEVEMENT","BIG_TEN","Flex","mediaQueries","md","AchievementFlex","isFinished","StyledLinkExternal","LinkExternal","Achievement","tokenName","campaignTitle","minLpForAchievement","minHeight","articleUrl","useIfoApprove","StyledCard","Card","Header","CardHeader","ifoId","FoldableContent","isVisible","isActive","colors","gradients","bubblegum","dropdown","CardsWrapper","singleCard","StyledCardBody","CardBody","StyledCardFooter","CardFooter","backgroundAlt","IfoFoldableCard","isInitiallyVisible","setIsVisible","DISABLED","setEnableStatus","Ribbon","variantColor","ribbonPosition","text","getRibbonComponent","lte","checkAllowance","ribbon","id","expanded","primaryStep","IfoPoolCard","IfoLayout","textSubtle","Wrapper","sm","IfoSteps","useProfile","stepsValidationStatus","getStatusProp","arePreviousValid","every","slice","Boolean","renderCardBody","step","_","activeIfo","ifosConfig","find","Ifo","useGetPublicIfoV2Data","useGetWalletIfoV2Data","IfoCardV2Data","ifoV1Abi","raisingAmount","useIfoV1Contract","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","claimed","IfoCardV1Data","useGetPublicIfoV1Data","useGetWalletIfoV1Data","inactiveIfo","filter","PastIfo","Ifos","useRouteMatch","path","url","isExact","activeIndex","to","exact","CurrentIfo","getImageUrlFromToken","TokenPairImage","primarySrc","secondarySrc","ButtonArrangement","StyledApproveConfirmButtonRow","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","initialState","approvalState","confirmState","reducer","actions","type","noop","onApproveSuccess","useReducer","dispatch","handlePreApprove","useRef","current","then","result","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","Math","abs","timeLeft","years","months","floor","arrayEvery","require","baseEvery","baseIteratee","isArray","isIterateeCall","module","exports","collection","predicate","guard","func","array","baseEach"],"mappings":"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","file":"static/js/5.d2e1211d.chunk.js","sourcesContent":["export enum EnableStatus {\r\n  ENABLED = 'enabled',\r\n  DISABLED = 'disabled',\r\n  IS_ENABLING = 'is_enabling',\r\n}\r\n\r\nexport default EnableStatus\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\r\nimport Container from 'components/Layout/Container'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport PageHeader from 'components/PageHeader'\r\n\r\nconst getGradient = (isDark: boolean) => {\r\n  if (isDark) {\r\n    return 'repeating-linear-gradient(to right, #332453, #332453 40px, #281D44 40px, #281D44 80px)'\r\n  }\r\n\r\n  return 'repeating-linear-gradient(to right, #21d4e2, #21d4e2 40px, #53dee9 40px, #53dee9 80px)'\r\n}\r\n\r\nconst StyledHero = styled.div`\r\n  background: linear-gradient(139.73deg,#313D5C 0%,#3D2A54 100%);\r\n  padding-bottom: 40px;\r\n  padding-top: 40px;\r\n`\r\n\r\nconst CurtainBottom = styled.div`\r\n  // background-image: url('/images/curtain-bottom-${({ theme }) => (theme.isDark ? 'dark' : 'light')}.png');\r\n  background-repeat: repeat-x;\r\n  background-size: contain;\r\n  height: 20px;\r\n`\r\n\r\nconst Hero = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box mb=\"32px\">\r\n      <StyledHero>\r\n        <Container>\r\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"orange\">\r\n            {t('IFO')}\r\n          </Heading>\r\n          <Text bold fontSize=\"20px\">\r\n            {t('Buy new tokens with a brand new token sale model.')}\r\n          </Text>\r\n        </Container>\r\n      </StyledHero>\r\n      <CurtainBottom />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import { IfoStatus } from 'config/constants/types'\r\n\r\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\r\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\r\n  // making the UI change to an inaccurate status\r\n  if (currentBlock === 0) {\r\n    return 'idle'\r\n  }\r\n\r\n  if (currentBlock < startBlock) {\r\n    return 'coming_soon'\r\n  }\r\n\r\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\r\n    return 'live'\r\n  }\r\n\r\n  if (currentBlock > endBlock) {\r\n    return 'finished'\r\n  }\r\n\r\n  return 'idle'\r\n}\r\n\r\nexport default null\r\n","import { useEffect, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus } from 'config/constants/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/LAUNCHPADV2.sol#L431\r\n// 1,000,000,000 / 100\r\nconst TAX_PRECISION = 10000000000\r\n\r\nconst formatPool = (pool) => ({\r\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\r\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\r\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\r\n  hasTax: pool ? pool[3] : false,\r\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\r\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\r\n})\r\n\r\n/**\r\n * Gets all public data of an LAUNCHPAD\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  const [state, setState] = useState({\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    poolBasic: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    poolUnlimited: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: 0,\r\n  })\r\n  const { currentBlock } = useBlock()\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = [\r\n      {\r\n        address,\r\n        name: 'startBlock',\r\n      },\r\n      {\r\n        address,\r\n        name: 'endBlock',\r\n      },\r\n      {\r\n        address,\r\n        name: 'viewPoolInformation',\r\n        params: [0],\r\n      },\r\n      {\r\n        address,\r\n        name: 'viewPoolInformation',\r\n        params: [1],\r\n      },\r\n      {\r\n        address,\r\n        name: 'viewPoolTaxRateOverflow',\r\n        params: [1],\r\n      },\r\n      {\r\n        address,\r\n        name: 'numberPoints',\r\n      },\r\n    ]\r\n\r\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await multicallv2(\r\n      ifoV2Abi,\r\n      ifoCalls,\r\n    )\r\n\r\n    const poolBasicFormatted = formatPool(poolBasic)\r\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\r\n\r\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0\r\n\r\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n    const totalBlocks = endBlockNum - startBlockNum\r\n    const blocksRemaining = endBlockNum - currentBlock\r\n\r\n    // Calculate the total progress until finished or until start\r\n    const progress =\r\n      currentBlock > startBlockNum\r\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n    setState((prev) => ({\r\n      ...prev,\r\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\r\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\r\n      status,\r\n      progress,\r\n      blocksRemaining,\r\n      startBlockNum,\r\n      endBlockNum,\r\n      numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\r\n    }))\r\n  }, [address, currentBlock, releaseBlockNumber])\r\n\r\n  useEffect(() => {\r\n    fetchIfoData()\r\n  }, [fetchIfoData, fastRefresh])\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'ethers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\n// Retrieve LAUNCHPAD allowance\r\nconst useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.allowance(account, spenderAddress)\r\n        setAllowance(new BigNumber(res.toString()))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetch()\r\n    }\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\nexport default useIfoAllowance\r\n","import { useEffect, useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\n/**\r\n * Gets all data from an LAUNCHPAD related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const { fastRefresh } = useRefresh()\r\n  const [state, setState] = useState<WalletIfoState>({\r\n    poolBasic: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n    },\r\n    poolUnlimited: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n    },\r\n  })\r\n\r\n  const { address, currency } = ifo\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV2Contract(address)\r\n  const currencyContract = useERC20(getAddress(currency.address))\r\n  const allowance = useIfoAllowance(currencyContract, address)\r\n\r\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = (poolId: PoolIds) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account, [0, 1]],\r\n    }))\r\n\r\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      poolBasic: {\r\n        ...prevState.poolBasic,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\r\n        hasClaimed: userInfo[1][0],\r\n      },\r\n      poolUnlimited: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\r\n        hasClaimed: userInfo[1][1],\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchIfoData()\r\n    }\r\n  }, [account, fetchIfoData, fastRefresh])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\ninterface PercentageOfTotalProps extends TextProps {\r\n  userAmount: BigNumber\r\n  totalAmount: BigNumber\r\n}\r\n\r\nconst PercentageOfTotal: React.FC<PercentageOfTotalProps> = ({ userAmount, totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const percentOfUserContribution = totalAmount.isGreaterThan(0)\r\n    ? userAmount.div(totalAmount).times(100).toNumber()\r\n    : BIG_ZERO\r\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, { maximumFractionDigits: 5 })\r\n\r\n  return (\r\n    <Text fontSize=\"14px\" color=\"textSubtle\" {...props}>\r\n      {t('%num% of total', { num: percentOfUserDisplay })}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default PercentageOfTotal\r\n","import React from 'react'\r\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport const SkeletonCardActions = () => {\r\n  return <Skeleton height=\"48px\" />\r\n}\r\n\r\nexport const SkeletonCardTokens = () => {\r\n  return (\r\n    <div>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\r\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\r\n        <Skeleton width=\"90%\" />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\r\n        <Skeleton width=\"90%\" />\r\n      </Flex>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SkeletonCardDetails = () => {\r\n  return (\r\n    <div>\r\n      <Skeleton mb=\"8px\" />\r\n      <Skeleton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default null\r\n","import React from 'react'\r\nimport {\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  CheckmarkCircleIcon,\r\n  FlexProps,\r\n  HelpIcon,\r\n  useTooltip,\r\n  Button,\r\n  AutoRenewIcon,\r\n  BunnyPlaceholderIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Ifo, PoolIds, Token } from 'config/constants/types'\r\nimport tokens from 'config/constants/tokens'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\r\nimport { EnableStatus } from '../types'\r\nimport PercentageOfTotal from './PercentageOfTotal'\r\nimport { SkeletonCardTokens } from './Skeletons'\r\n\r\ninterface TokenSectionProps extends FlexProps {\r\n  primaryToken?: Token\r\n  secondaryToken?: Token\r\n}\r\n\r\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, secondaryToken, children, ...props }) => {\r\n  const renderTokenComponent = () => {\r\n    if (!primaryToken) {\r\n      return <BunnyPlaceholderIcon width={32} mr=\"16px\" />\r\n    }\r\n\r\n    if (primaryToken && secondaryToken) {\r\n      return (\r\n        <TokenPairImage\r\n          variant=\"inverted\"\r\n          primaryToken={primaryToken}\r\n          height={32}\r\n          width={32}\r\n          secondaryToken={secondaryToken}\r\n          mr=\"16px\"\r\n        />\r\n      )\r\n    }\r\n\r\n    return <TokenImage token={primaryToken} height={32} width={32} mr=\"16px\" />\r\n  }\r\n\r\n  return (\r\n    <Flex {...props}>\r\n      {renderTokenComponent()}\r\n      <div>{children}</div>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst CakeBnbTokenSection: React.FC<TokenSectionProps> = (props) => {\r\n  return <TokenSection primaryToken={tokens.mavr} secondaryToken={tokens.wbnb} {...props} />\r\n}\r\n\r\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\r\n\r\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\r\n\r\ninterface IfoCardTokensProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  hasProfile: boolean\r\n  isLoading: boolean\r\n  onApprove: () => Promise<any>\r\n  enableStatus: EnableStatus\r\n}\r\n\r\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  hasProfile,\r\n  isLoading,\r\n  onApprove,\r\n  enableStatus,\r\n}) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\r\n      'Sorry, you didn’t contribute enough LP tokens to meet the minimum threshold. You didn’t buy anything in this sale, but you can still reclaim your LP tokens.',\r\n    ),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency, token } = ifo\r\n  const { hasClaimed } = userPoolCharacteristics\r\n  const distributionRatio = ifo[poolId].distributionRatio * 100\r\n\r\n  const renderTokenSection = () => {\r\n    if (isLoading) {\r\n      return <SkeletonCardTokens />\r\n    }\r\n    if (account && !hasProfile) {\r\n      if (publicIfoData.status === 'finished') {\r\n        return <Text textAlign=\"center\">{t('Activate PancakeSwap Profile to take part in next LAUNCHPAD‘s!')}</Text>\r\n      }\r\n      return <Text textAlign=\"center\">{t('You need an active PancakeSwap Profile to take part in an LAUNCHPAD!')}</Text>\r\n    }\r\n    if (publicIfoData.status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          <TokenSection>\r\n            <Label>{t('On sale')}</Label>\r\n            <Value>{ifo[poolId].saleAmount}</Value>\r\n          </TokenSection>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">\r\n            {t('%ratio%% of total sale', { ratio: distributionRatio })}\r\n          </Text>\r\n          {enableStatus !== EnableStatus.ENABLED && account && (\r\n            <Button\r\n              width=\"100%\"\r\n              mt=\"16px\"\r\n              onClick={onApprove}\r\n              isLoading={enableStatus === EnableStatus.IS_ENABLING}\r\n              endIcon={enableStatus === EnableStatus.IS_ENABLING ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            >\r\n              {t('Enable')}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'live') {\r\n      return (\r\n        <>\r\n          <CakeBnbTokenSection mb=\"24px\">\r\n            <Label>{t('Your %symbol% committed', { symbol: currency.symbol })}</Label>\r\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, currency.decimals)}</Value>\r\n            <PercentageOfTotal\r\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\r\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\r\n            />\r\n          </CakeBnbTokenSection>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label>{t('%symbol% to receive', { symbol: token.symbol })}</Label>\r\n            <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\r\n          </TokenSection>\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'finished') {\r\n      return userPoolCharacteristics.amountTokenCommittedInLP.isEqualTo(0) ? (\r\n        <Flex flexDirection=\"column\" alignItems=\"center\">\r\n          {/* <BunnyPlaceholderIcon width={80} mb=\"16px\" /> */}\r\n          <Text>{t('You didn’t participate in this sale!')}</Text>\r\n        </Flex>\r\n      ) : (\r\n        <>\r\n          <CakeBnbTokenSection mb=\"24px\">\r\n            <Label>\r\n              {t(hasClaimed ? 'Your %symbol% RECLAIMED' : 'Your %symbol% TO RECLAIM', { symbol: currency.symbol })}\r\n            </Label>\r\n            <Flex alignItems=\"center\">\r\n              <Value>{getBalanceNumber(userPoolCharacteristics.refundingAmountInLP, currency.decimals)}</Value>\r\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\r\n            </Flex>\r\n            <PercentageOfTotal\r\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\r\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\r\n            />\r\n          </CakeBnbTokenSection>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label> {t(hasClaimed ? '%symbol% received' : '%symbol% to receive', { symbol: token.symbol })}</Label>\r\n            <Flex alignItems=\"center\">\r\n              <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\r\n              {!hasClaimed && userPoolCharacteristics.offeringAmountInToken.isEqualTo(0) && (\r\n                <div ref={targetRef} style={{ display: 'flex', marginLeft: '8px' }}>\r\n                  <HelpIcon />\r\n                </div>\r\n              )}\r\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\r\n            </Flex>\r\n          </TokenSection>\r\n        </>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <Box pb=\"24px\">\r\n      {tooltipVisible && tooltip}\r\n      {renderTokenSection()}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default IfoCardTokens\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\r\nimport { PoolIds, Ifo } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport tokens from 'config/constants/tokens'\r\nimport {  TokenPairImage } from 'components/TokenImage'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  userCurrencyBalance: BigNumber\r\n  onSuccess: (amount: BigNumber, txHash: string) => void\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\r\n\r\n// Default value for transaction setting, tweak based on BSC network congestion.\r\nconst gasPrice = parseUnits('10', 'gwei').toString()\r\n\r\nconst ContributeModal: React.FC<Props> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  userCurrencyBalance,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency } = ifo\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { contract } = walletIfoData\r\n  const [value, setValue] = useState('')\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const raisingTokenContract = useERC20(getAddress(currency.address))\r\n  const { t } = useTranslation()\r\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await raisingTokenContract.allowance(account, contract.address)\r\n          const currentAllowance = new BigNumber(response.toString())\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return callWithGasPrice(raisingTokenContract, 'approve', [contract.address, ethers.constants.MaxUint256], {\r\n          gasPrice,\r\n        })\r\n      },\r\n      onConfirm: () => {\r\n        return callWithGasPrice(\r\n          contract,\r\n          'depositPool',\r\n          [valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1],\r\n          {\r\n            gasPrice,\r\n          },\r\n        )\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        await onSuccess(valueWithTokenDecimals, receipt.transactionHash)\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  const maximumLpCommitable = (() => {\r\n    if (limitPerUserInLP.isGreaterThan(0)) {\r\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance)\r\n        ? limitPerUserInLP\r\n        : userCurrencyBalance\r\n    }\r\n    return userCurrencyBalance\r\n  })()\r\n\r\n  return (\r\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"320px\">\r\n        {limitPerUserInLP.isGreaterThan(0) && (\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n            <Text>{t('Max. LP token entry')}</Text>\r\n            <Text>{getBalanceAmount(limitPerUserInLP, currency.decimals).toString()}</Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Commit')}:</Text>\r\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\r\n            <TokenPairImage\r\n            variant=\"inverted\"\r\n            primaryToken={tokens.mavr}\r\n            height={32}\r\n            width={32}\r\n            secondaryToken={tokens.wbnb}\r\n            mr=\"16px\"\r\n            />\r\n            {/* <Image\r\n              src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\r\n              width={24}\r\n              height={24}\r\n            /> */}\r\n            <Text>{currency.symbol}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          currencyValue={publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)}\r\n          onUserInput={setValue}\r\n          isWarning={valueWithTokenDecimals.isGreaterThan(maximumLpCommitable)}\r\n          decimals={currency.decimals}\r\n          mb=\"8px\"\r\n        />\r\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\r\n          {t('Balance: %balance%', {\r\n            balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\r\n          })}\r\n        </Text>\r\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n          {multiplierValues.map((multiplierValue, index) => (\r\n            <Button\r\n              key={multiplierValue}\r\n              scale=\"xs\"\r\n              variant=\"tertiary\"\r\n              onClick={() => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString())}\r\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\r\n            >\r\n              {multiplierValue * 100}%\r\n            </Button>\r\n          ))}\r\n        </Flex>\r\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\r\n          {t(\r\n            'If you don’t commit enough LP tokens, you may not receive any LAUNCHPAD tokens at all and will only receive a full refund of your LP tokens.',\r\n          )}\r\n        </Text>\r\n        <ApproveConfirmButtons\r\n          isApproveDisabled={isConfirmed || isConfirming || isApproved}\r\n          isApproving={isApproving}\r\n          isConfirmDisabled={\r\n            !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)\r\n          }\r\n          isConfirming={isConfirming}\r\n          onApprove={handleApprove}\r\n          onConfirm={handleConfirm}\r\n        />\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ContributeModal\r\n","import React from 'react'\r\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { Token } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface Props {\r\n  currency: Token\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst GetLpModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Modal title={t('LP Tokens required')} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"288px\">\r\n        <Image\r\n          src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\r\n          width={72}\r\n          height={72}\r\n          margin=\"auto\"\r\n          mb=\"24px\"\r\n        />\r\n        <Text mb=\"16px\">{t('You’ll need MAVR-BNB LP tokens to participate in the LAUNCHPAD!')}</Text>\r\n        <Text mb=\"24px\">{t('Get LP tokens, or make sure your tokens aren’t staked somewhere else.')}</Text>\r\n        <Button\r\n          as={Link}\r\n          external\r\n          href={`${BASE_ADD_LIQUIDITY_URL}/BNB/0xee927B622f18C6a0859a78aBa6156a5afea09678`}\r\n          endIcon={<OpenNewIcon color=\"white\" />}\r\n          minWidth=\"100%\" // Bypass the width=\"fit-content\" on Links\r\n        >\r\n          {t('Get LP tokens')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GetLpModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ContributeModal from './ContributeModal'\r\nimport GetLpModal from './GetLpModal'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const { balance: userCurrencyBalance } = useTokenBalance(getAddress(ifo.currency.address))\r\n\r\n  // Refetch all the data, and display a message when fetching is done\r\n  const handleContributeSuccess = async (amount: BigNumber, txHash: string) => {\r\n    await Promise.all([publicIfoData.fetchIfoData(), walletIfoData.fetchIfoData()])\r\n    toastSuccess(\r\n      t('Success!'),\r\n      <ToastDescriptionWithTx txHash={txHash}>\r\n        {t('You have contributed %amount% MAVR-BNB LP tokens to this LAUNCHPAD!', {\r\n          amount: getBalanceNumber(amount),\r\n        })}\r\n      </ToastDescriptionWithTx>,\r\n    )\r\n  }\r\n\r\n  const [onPresentContributeModal] = useModal(\r\n    <ContributeModal\r\n      poolId={poolId}\r\n      ifo={ifo}\r\n      publicIfoData={publicIfoData}\r\n      walletIfoData={walletIfoData}\r\n      onSuccess={handleContributeSuccess}\r\n      userCurrencyBalance={userCurrencyBalance}\r\n    />,\r\n    false,\r\n  )\r\n\r\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={ifo.currency} />, false)\r\n\r\n  const isDisabled =\r\n    isPendingTx ||\r\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\r\n\r\n  return (\r\n    <Button\r\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\r\n      width=\"100%\"\r\n      disabled={isDisabled}\r\n    >\r\n      {isDisabled ? t('Max. Committed') : t('Commit LP Tokens')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ContributeButton\r\n","import React from 'react'\r\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\r\nimport { PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifoVersion: number\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { t } = useTranslation()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\r\n\r\n  const handleClaim = async () => {\r\n    try {\r\n      let txHash\r\n      setPendingTx(true)\r\n\r\n      if (ifoVersion === 1) {\r\n        const tx = await walletIfoData.contract.harvest()\r\n        const receipt = await tx.wait()\r\n        txHash = receipt.transactionHash\r\n      } else {\r\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\r\n        const receipt = await tx.wait()\r\n        txHash = receipt.transactionHash\r\n      }\r\n\r\n      walletIfoData.setIsClaimed(poolId)\r\n      toastSuccess(\r\n        t('Success!'),\r\n        <ToastDescriptionWithTx txHash={txHash}>\r\n          {t('You have successfully claimed your rewards.')}\r\n        </ToastDescriptionWithTx>,\r\n      )\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(error)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleClaim}\r\n      disabled={userPoolCharacteristics.isPendingTx}\r\n      width=\"100%\"\r\n      isLoading={userPoolCharacteristics.isPendingTx}\r\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n    >\r\n      {t('Claim')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Button } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport ContributeButton from './ContributeButton'\r\nimport ClaimButton from './ClaimButton'\r\nimport { SkeletonCardActions } from './Skeletons'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  hasProfile: boolean\r\n  isLoading: boolean\r\n}\r\n\r\nconst IfoCardActions: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData, hasProfile, isLoading }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  if (isLoading) {\r\n    return <SkeletonCardActions />\r\n  }\r\n\r\n  if (!account) {\r\n    return <ConnectWalletButton width=\"100%\" />\r\n  }\r\n\r\n  // if (!hasProfile) {\r\n  //   return (\r\n  //     <Button as={Link} to=\"/profile\" width=\"100%\">\r\n  //       {t('Activate your Profile')}\r\n  //     </Button>\r\n  //   )\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {publicIfoData.status === 'live' && (\r\n        <ContributeButton poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n      )}\r\n      {publicIfoData.status === 'finished' &&\r\n        !userPoolCharacteristics.hasClaimed &&\r\n        (userPoolCharacteristics.offeringAmountInToken.isGreaterThan(0) ||\r\n          userPoolCharacteristics.refundingAmountInLP.isGreaterThan(0)) && (\r\n          <ClaimButton poolId={poolId} ifoVersion={ifo.version} walletIfoData={walletIfoData} />\r\n        )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IfoCardActions\r\n","import React from 'react'\r\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport { SkeletonCardDetails } from './Skeletons'\r\n\r\nexport interface IfoCardDetailsProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nexport interface FooterEntryProps {\r\n  label: string\r\n  value: string | number\r\n}\r\n\r\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text small color=\"textSubtle\">\r\n        {label}\r\n      </Text>\r\n      {value ? (\r\n        <Text small textAlign=\"right\">\r\n          {value}\r\n        </Text>\r\n      ) : (\r\n        <Skeleton height={21} width={80} />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, currencyPriceInUSD } = publicIfoData\r\n  const poolCharacteristic = publicIfoData[poolId]\r\n\r\n  /* Format start */\r\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\r\n  const taxRate = `${poolCharacteristic.taxRate}%`\r\n\r\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\r\n    .div(poolCharacteristic.raisingAmountPool)\r\n    .times(100)\r\n    .toFixed(2)\r\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\r\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\r\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\r\n\r\n  /* Format end */\r\n\r\n  const renderBasedOnIfoStatus = () => {\r\n    if (status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          <FooterEntry label={t('MAVR to burn:')} value={ifo[poolId].cakeToBurn} />\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'live') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'finished') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          <FooterEntry label={t('MAVR to burn:')} value={ifo[poolId].cakeToBurn} />\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    return <SkeletonCardDetails />\r\n  }\r\n\r\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\r\n}\r\n\r\nexport default IfoCardDetails\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Card, CardBody, CardHeader, Text, useTooltip, HelpIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { EnableStatus } from '../types'\r\nimport IfoCardTokens from './IfoCardTokens'\r\nimport IfoCardActions from './IfoCardActions'\r\nimport IfoCardDetails from './IfoCardDetails'\r\n\r\ninterface IfoCardProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  onApprove: () => Promise<any>\r\n  enableStatus: EnableStatus\r\n}\r\n\r\ninterface CardConfig {\r\n  [key: string]: {\r\n    title: string\r\n    variant: 'blue' | 'violet'\r\n    tooltip: string\r\n  }\r\n}\r\n\r\nconst cardConfig: CardConfig = {\r\n  [PoolIds.poolBasic]: {\r\n    title: 'Basic Sale',\r\n    variant: 'blue',\r\n    tooltip: 'Every person can only commit a limited amount, but may expect a higher return per token committed.',\r\n  },\r\n  [PoolIds.poolUnlimited]: {\r\n    title: 'Unlimited Sale',\r\n    variant: 'violet',\r\n    tooltip: 'No limits on the amount you can commit. Additional fee applies when claiming.',\r\n  },\r\n}\r\n\r\nconst SmallCard: React.FC<IfoCardProps> = ({ poolId, ifo, publicIfoData, walletIfoData, onApprove, enableStatus }) => {\r\n  const { t } = useTranslation()\r\n  const config = cardConfig[poolId]\r\n  // const { hasProfile, isLoading: isProfileLoading } = useProfile()\r\n  const hasProfile = true\r\n  const isProfileLoading = false\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t(config.tooltip), { placement: 'bottom' })\r\n\r\n  const isLoading = isProfileLoading || publicIfoData.status === 'idle'\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <Card>\r\n        <CardHeader variant={config.variant}>\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text bold fontSize=\"20px\">\r\n              {t(config.title)}\r\n            </Text>\r\n            <div ref={targetRef}>\r\n              <HelpIcon />\r\n            </div>\r\n          </Flex>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <IfoCardTokens\r\n            poolId={poolId}\r\n            ifo={ifo}\r\n            publicIfoData={publicIfoData}\r\n            walletIfoData={walletIfoData}\r\n            hasProfile={hasProfile}\r\n            isLoading={isLoading}\r\n            onApprove={onApprove}\r\n            enableStatus={enableStatus}\r\n          />\r\n          <IfoCardActions\r\n            poolId={poolId}\r\n            ifo={ifo}\r\n            publicIfoData={publicIfoData}\r\n            walletIfoData={walletIfoData}\r\n            hasProfile={hasProfile}\r\n            isLoading={isLoading}\r\n          />\r\n          <IfoCardDetails poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} />\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SmallCard\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Flex, Link, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\n\r\ninterface Props {\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nconst Timer: React.FC<Props> = ({ publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, secondsUntilStart, secondsUntilEnd, startBlockNum } = publicIfoData\r\n  const countdownToUse = status === 'coming_soon' ? secondsUntilStart : secondsUntilEnd\r\n  const timeUntil = getTimePeriods(countdownToUse)\r\n  const suffix = status === 'coming_soon' ? t('Start').toLowerCase() : t('Finish').toLowerCase()\r\n  return (\r\n    <Flex justifyContent=\"center\" mb=\"32px\">\r\n      {status === 'idle' ? (\r\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\r\n      ) : (\r\n        <>\r\n          <PocketWatchIcon width=\"48px\" mr=\"16px\" />\r\n          <Flex alignItems=\"center\">\r\n            <Text bold mr=\"16px\">\r\n              {suffix}:\r\n            </Text>\r\n            <Text>\r\n              {t('%day%d %hour%h %minute%m', {\r\n                day: timeUntil.days,\r\n                hour: timeUntil.hours,\r\n                minute: timeUntil.minutes,\r\n              })}\r\n            </Text>\r\n            <Link\r\n              href={getBscScanLink(startBlockNum, 'countdown')}\r\n              target=\"blank\"\r\n              rel=\"noopener noreferrer\"\r\n              ml=\"8px\"\r\n              textTransform=\"lowercase\"\r\n            >\r\n              {`(${t('Blocks')})`}\r\n            </Link>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Timer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, LinkExternal, Image, Text, PrizeIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\nimport { Ifo } from 'config/constants/types'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { getBscScanLink } from 'utils'\r\n\r\nconst MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nconst Container = styled(Flex)`\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n    align-items: initial;\r\n  }\r\n`\r\n\r\nconst AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\r\n  ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  margin-top: 32px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-top: 0;\r\n  }\r\n`\r\n\r\nconst Achievement: React.FC<Props> = ({ ifo, publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const tokenName = ifo.token.symbol.toLowerCase()\r\n  const campaignTitle = ifo.name\r\n  const minLpForAchievement = MIN_DOLLAR_FOR_ACHIEVEMENT.div(publicIfoData.currencyPriceInUSD).toNumber()\r\n\r\n  return (\r\n    <Container>\r\n      <AchievementFlex isFinished={publicIfoData.status === 'finished'} alignItems=\"center\" flexGrow={1}>\r\n        <Image src={`/images/achievements/ifo-${tokenName}.svg`} width={56} height={56} mr=\"8px\" />\r\n        <Flex flexDirection=\"column\">\r\n          <Text color=\"secondary\" fontSize=\"12px\">\r\n            {`${t('Achievement')}:`}\r\n          </Text>\r\n          <Flex>\r\n            <Text bold mr=\"8px\">\r\n              {t('LAUNCHPAD Shopper: %title%', { title: campaignTitle })}\r\n            </Text>\r\n            <Flex alignItems=\"center\" mr=\"8px\">\r\n              <PrizeIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\r\n              <Text color=\"textSubtle\">{publicIfoData.numberPoints}</Text>\r\n            </Flex>\r\n          </Flex>\r\n          {publicIfoData.currencyPriceInUSD.gt(0) ? (\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Commit ~%amount% LP in total to earn!', { amount: minLpForAchievement.toFixed(3) })}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton minHeight={18} width={80} />\r\n          )}\r\n        </Flex>\r\n      </AchievementFlex>\r\n      <Flex alignItems=\"flex-end\" flexDirection=\"column\">\r\n        <StyledLinkExternal href={ifo.articleUrl} mb=\"8px\">\r\n          {t('Learn more about %title%', { title: campaignTitle })}\r\n        </StyledLinkExternal>\r\n        <StyledLinkExternal href={getBscScanLink(ifo.address, 'address')}>{t('View Contract')}</StyledLinkExternal>\r\n      </Flex>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Achievement\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const onApprove = useCallback(async (): Promise<ethers.providers.TransactionReceipt> => {\r\n    const tx = await callWithGasPrice(tokenContract, 'approve', [spenderAddress, ethers.constants.MaxUint256])\r\n    return tx.wait()\r\n  }, [spenderAddress, tokenContract, callWithGasPrice])\r\n\r\n  return onApprove\r\n}\r\n\r\nexport default useIfoApprove\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  CardRibbon,\r\n  ExpandableButton,\r\n  Progress,\r\n  Button,\r\n  ChevronUpIcon,\r\n} from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { EnableStatus } from './types'\r\nimport IfoPoolCard from './IfoPoolCard'\r\nimport Timer from './Timer'\r\nimport Achievement from './Achievement'\r\nimport useIfoApprove from '../../hooks/useIfoApprove'\r\n\r\ninterface IfoFoldableCardProps {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  isInitiallyVisible: boolean\r\n}\r\n\r\nconst getRibbonComponent = (ifo: Ifo, status: IfoStatus, t: any) => {\r\n  if (status === 'coming_soon') {\r\n    return <CardRibbon variantColor=\"textDisabled\" ribbonPosition=\"left\" text={t('Coming Soon')} />\r\n  }\r\n\r\n  if (status === 'live' || (status === 'finished' && ifo.isActive)) {\r\n    return (\r\n      <CardRibbon\r\n        variantColor=\"primary\"\r\n        ribbonPosition=\"left\"\r\n        style={{ textTransform: 'uppercase' }}\r\n        text={status === 'live' ? `${t('Live')}!` : `${t('Finished')}!`}\r\n      />\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  max-width: 736px;\r\n  width: 100%;\r\n  margin: auto;\r\n`\r\n\r\nconst Header = styled(CardHeader)<{ ifoId: string }>`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  height: 112px;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-image: ${({ ifoId }) => `url('/images/ifos/${ifoId}-bg.svg')`};\r\n`\r\n\r\nconst FoldableContent = styled.div<{ isVisible: boolean; isActive: boolean }>`\r\n  display: ${({ isVisible }) => (isVisible ? 'block' : 'none')};\r\n  background: ${({ isActive, theme }) => (isActive ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\r\n`\r\n\r\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  margin-bottom: 32px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: ${({ singleCard }) => (singleCard ? '1fr' : '1fr 1fr')};\r\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\r\n  }\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  padding: 24px 16px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    padding: 24px;\r\n  }\r\n`\r\n\r\nconst StyledCardFooter = styled(CardFooter)`\r\n  text-align: center;\r\n  padding: 8px;\r\n  background: ${({ theme }) => theme.colors.backgroundAlt};\r\n`\r\n\r\nconst IfoFoldableCard: React.FC<IfoFoldableCardProps> = ({ ifo, publicIfoData, walletIfoData, isInitiallyVisible }) => {\r\n  const [isVisible, setIsVisible] = useState(isInitiallyVisible)\r\n  const [enableStatus, setEnableStatus] = useState(EnableStatus.DISABLED)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const raisingTokenContract = useERC20(getAddress(ifo.currency.address))\r\n  const Ribbon = getRibbonComponent(ifo, publicIfoData.status, t)\r\n  const isActive = publicIfoData.status !== 'finished' && ifo.isActive\r\n  const { contract } = walletIfoData\r\n  const onApprove = useIfoApprove(raisingTokenContract, contract.address)\r\n  const { toastSuccess } = useToast()\r\n\r\n  const handleApprove = async () => {\r\n    try {\r\n      setEnableStatus(EnableStatus.IS_ENABLING)\r\n\r\n      const receipt = await onApprove()\r\n\r\n      setEnableStatus(EnableStatus.ENABLED)\r\n      toastSuccess(\r\n        t('Successfully Enabled!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n          {t('You can now participate in the %symbol% LAUNCHPAD.', { symbol: ifo.token.symbol })}\r\n        </ToastDescriptionWithTx>,\r\n      )\r\n    } catch (error) {\r\n      setEnableStatus(EnableStatus.DISABLED)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const checkAllowance = async () => {\r\n      try {\r\n        const response = await raisingTokenContract.allowance(account, contract.address)\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        setEnableStatus(currentAllowance.lte(0) ? EnableStatus.DISABLED : EnableStatus.ENABLED)\r\n      } catch (error) {\r\n        setEnableStatus(EnableStatus.DISABLED)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      checkAllowance()\r\n    }\r\n  }, [account, raisingTokenContract, contract, setEnableStatus])\r\n\r\n  return (\r\n    <StyledCard ribbon={Ribbon}>\r\n      <Header ifoId={ifo.id}>\r\n        <ExpandableButton expanded={isVisible} onClick={() => setIsVisible((prev) => !prev)} />\r\n      </Header>\r\n      <FoldableContent isVisible={isVisible} isActive={publicIfoData.status !== 'idle' && isActive}>\r\n        {isActive && <Progress variant=\"flat\" primaryStep={publicIfoData.progress} />}\r\n        <StyledCardBody>\r\n          {isActive && <Timer publicIfoData={publicIfoData} />}\r\n          <CardsWrapper singleCard={!publicIfoData.poolBasic || !walletIfoData.poolBasic}>\r\n            {publicIfoData.poolBasic && walletIfoData.poolBasic && (\r\n              <IfoPoolCard\r\n                poolId={PoolIds.poolBasic}\r\n                ifo={ifo}\r\n                publicIfoData={publicIfoData}\r\n                walletIfoData={walletIfoData}\r\n                onApprove={handleApprove}\r\n                enableStatus={enableStatus}\r\n              />\r\n            )}\r\n            <IfoPoolCard\r\n              poolId={PoolIds.poolUnlimited}\r\n              ifo={ifo}\r\n              publicIfoData={publicIfoData}\r\n              walletIfoData={walletIfoData}\r\n              onApprove={handleApprove}\r\n              enableStatus={enableStatus}\r\n            />\r\n          </CardsWrapper>\r\n          <Achievement ifo={ifo} publicIfoData={publicIfoData} />\r\n        </StyledCardBody>\r\n        <StyledCardFooter>\r\n          <Button variant=\"text\" endIcon={<ChevronUpIcon color=\"primary\" />} onClick={() => setIsVisible(false)}>\r\n            {t('Close')}\r\n          </Button>\r\n        </StyledCardFooter>\r\n      </FoldableContent>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default IfoFoldableCard\r\n","import styled from 'styled-components'\r\n\r\nconst IfoLayout = styled.div`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  padding: 40px 0;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport default IfoLayout\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport every from 'lodash/every'\r\nimport { Stepper, Step, StepStatus, Card, CardBody, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { Ifo } from 'config/constants/types'\r\nimport { WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport Container from 'components/Layout/Container'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst Wrapper = styled(Container)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  margin-left: -16px;\r\n  margin-right: -16px;\r\n  padding-top: 48px;\r\n  padding-bottom: 48px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: -24px;\r\n    margin-right: -24px;\r\n  }\r\n`\r\n\r\nconst IfoSteps: React.FC<Props> = ({ ifo, walletIfoData }) => {\r\n  const { poolBasic, poolUnlimited } = walletIfoData\r\n  const { hasProfile } = useProfile()\r\n  const { t } = useTranslation()\r\n  const { balance } = useTokenBalance(getAddress(ifo.currency.address))\r\n  const stepsValidationStatus = [\r\n    // hasProfile,\r\n    balance.isGreaterThan(0),\r\n    poolBasic.amountTokenCommittedInLP.isGreaterThan(0) || poolUnlimited.amountTokenCommittedInLP.isGreaterThan(0),\r\n    poolBasic.hasClaimed || poolUnlimited.hasClaimed,\r\n  ]\r\n\r\n  const getStatusProp = (index: number): StepStatus => {\r\n    const arePreviousValid = index === 0 ? true : every(stepsValidationStatus.slice(0, index), Boolean)\r\n    if (stepsValidationStatus[index]) {\r\n      return arePreviousValid ? 'past' : 'future'\r\n    }\r\n    return arePreviousValid ? 'current' : 'future'\r\n  }\r\n\r\n  const renderCardBody = (step: number) => {\r\n    const isStepValid = stepsValidationStatus[step]\r\n    switch (step) {\r\n      // case 5:\r\n      //   return (\r\n      //     <CardBody>\r\n      //       <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n      //         {t('Activate your Profile')}\r\n      //       </Heading>\r\n      //       <Text color=\"textSubtle\" small mb=\"16px\">\r\n      //         {t('You’ll need an active PancakeSwap Profile to take part in an LAUNCHPAD!')}\r\n      //       </Text>\r\n      //       {isStepValid ? (\r\n      //         <Text color=\"success\" bold>\r\n      //           {t('Profile Active!')}\r\n      //         </Text>\r\n      //       ) : (\r\n      //         <Button as={Link} href=\"/profile\">\r\n      //           {t('Activate your Profile')}\r\n      //         </Button>\r\n      //       )}\r\n      //     </CardBody>\r\n      //   )\r\n      case 0:\r\n        return (\r\n          <CardBody>\r\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n              {t('Get MAVR-BNB LP Tokens')}\r\n            </Heading>\r\n            <Text color=\"textSubtle\" small>\r\n              {t('Stake MAVR and BNB in the liquidity pool to get LP tokens.')} <br />\r\n              {t('You’ll spend them to buy LAUNCHPAD sale tokens.')}\r\n            </Text>\r\n            <Button\r\n              as={Link}\r\n              external\r\n              href={`${BASE_ADD_LIQUIDITY_URL}/BNB/0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82`}\r\n              endIcon={<OpenNewIcon color=\"white\" />}\r\n              mt=\"16px\"\r\n            >\r\n              {t('Get LP tokens')}\r\n            </Button>\r\n          </CardBody>\r\n        )\r\n      case 1:\r\n        return (\r\n          <CardBody>\r\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n              {t('Commit LP Tokens')}\r\n            </Heading>\r\n            <Text color=\"textSubtle\" small>\r\n              {t('When the LAUNCHPAD sales are live, you can “commit” your LP tokens to buy the tokens being sold.')} <br />\r\n              {t('We recommend committing to the Basic Sale first, but you can do both if you like.')}\r\n            </Text>\r\n          </CardBody>\r\n        )\r\n      case 2:\r\n        return (\r\n          <CardBody>\r\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n              {t('Claim your tokens and achievement')}\r\n            </Heading>\r\n            <Text color=\"textSubtle\" small>\r\n              {t(\r\n                'After the LAUNCHPAD sales finish, you can claim any LAUNCHPAD tokens that you bought, and any unspent MAVR-BNB LP tokens will be returned to your wallet.',\r\n              )}\r\n            </Text>\r\n          </CardBody>\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Heading as=\"h2\" scale=\"xl\" color=\"secondary\" mb=\"24px\" textAlign=\"center\">\r\n        {t('How to Take Part')}\r\n      </Heading>\r\n      <Stepper>\r\n        {stepsValidationStatus.map((_, index) => (\r\n          // eslint-disable-next-line react/no-array-index-key\r\n          <Step key={index} index={index} status={getStatusProp(index)}>\r\n            <Card>{renderCardBody(index)}</Card>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default IfoSteps\r\n","import React from 'react'\r\nimport { ifosConfig } from 'config/constants'\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\r\nimport IfoFoldableCard from './components/IfoFoldableCard'\r\nimport IfoLayout from './components/IfoLayout'\r\nimport IfoSteps from './components/IfoSteps'\r\nimport IfoQuestions from './components/IfoQuestions'\r\n\r\n/**\r\n * Note: currently there should be only 1 active LAUNCHPAD at a time\r\n */\r\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\r\n\r\nconst Ifo = () => {\r\n  const publicIfoData = useGetPublicIfoV2Data(activeIfo)\r\n  const walletIfoData = useGetWalletIfoV2Data(activeIfo)\r\n\r\n  return (\r\n    <IfoLayout>\r\n      <IfoFoldableCard ifo={activeIfo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} isInitiallyVisible />\r\n      <IfoSteps ifo={activeIfo} walletIfoData={walletIfoData} />\r\n      {/* <IfoQuestions /> */}\r\n    </IfoLayout>\r\n  )\r\n}\r\n\r\nexport default Ifo\r\n","import React from 'react'\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n  isInitiallyVisible: boolean\r\n}\r\n\r\nconst IfoCardV2Data: React.FC<Props> = ({ ifo, isInitiallyVisible }) => {\r\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV2Data(ifo)\r\n\r\n  return (\r\n    <IfoFoldableCard\r\n      ifo={ifo}\r\n      publicIfoData={publicIfoData}\r\n      walletIfoData={walletIfoData}\r\n      isInitiallyVisible={isInitiallyVisible}\r\n    />\r\n  )\r\n}\r\n\r\nexport default IfoCardV2Data\r\n","import { useEffect, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n/**\r\n * Gets all public data of an LAUNCHPAD\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const [state, setState] = useState({\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: null,\r\n    [PoolIds.poolUnlimited]: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      totalAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO, // Not know\r\n      limitPerUserInLP: BIG_ZERO, //  Not used\r\n      taxRate: 0, //  Not used\r\n      sumTaxesOverflow: BIG_ZERO, //  Not used\r\n    },\r\n  })\r\n  const { currentBlock } = useBlock()\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n    }))\r\n\r\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n\r\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n\r\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n    const totalBlocks = endBlockNum - startBlockNum\r\n    const blocksRemaining = endBlockNum - currentBlock\r\n\r\n    // Calculate the total progress until finished or until start\r\n    const progress =\r\n      currentBlock > startBlockNum\r\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n    setState((prev) => ({\r\n      status,\r\n      blocksRemaining,\r\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n      progress,\r\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n      startBlockNum,\r\n      endBlockNum,\r\n      currencyPriceInUSD: null,\r\n      numberPoints: null,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prev.poolUnlimited,\r\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\r\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [address, currentBlock, releaseBlockNumber])\r\n\r\n  useEffect(() => {\r\n    fetchIfoData()\r\n  }, [fetchIfoData])\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n","import { useEffect, useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\ninterface UserInfo {\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\n/**\r\n * Gets all data from an LAUNCHPAD related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>({\r\n    [PoolIds.poolUnlimited]: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO, // Not used\r\n    },\r\n  })\r\n\r\n  const { address, currency } = ifo\r\n  const { poolUnlimited } = state\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV1Contract(address)\r\n  const currencyContract = useERC20(getAddress(currency.address))\r\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\r\n\r\n  const setPendingTx = (status: boolean) =>\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = () => {\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account],\r\n    }))\r\n\r\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n    const parsedUserInfo: UserInfo = userInfoResponse\r\n      ? {\r\n          amount: new BigNumber(userInfoResponse.amount.toString()),\r\n          claimed: userInfoResponse.claimed,\r\n        }\r\n      : { amount: BIG_ZERO, claimed: false }\r\n\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: parsedUserInfo.amount,\r\n        hasClaimed: parsedUserInfo.claimed,\r\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\r\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchIfoData()\r\n    }\r\n  }, [account, fetchIfoData])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n","import React from 'react'\r\nimport useGetPublicIfoV1Data from 'views/Ifos/hooks/v1/useGetPublicIfoData'\r\nimport useGetWalletIfoV1Data from 'views/Ifos/hooks/v1/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n}\r\n\r\nconst IfoCardV1Data: React.FC<Props> = ({ ifo }) => {\r\n  const publicIfoData = useGetPublicIfoV1Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV1Data(ifo)\r\n\r\n  return (\r\n    <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} isInitiallyVisible={false} />\r\n  )\r\n}\r\n\r\nexport default IfoCardV1Data\r\n","import React from 'react'\r\nimport { ifosConfig } from 'config/constants'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoCardV2Data from './components/IfoCardV2Data'\r\nimport IfoCardV1Data from './components/IfoCardV1Data'\r\nimport IfoLayout from './components/IfoLayout'\r\n\r\nconst inactiveIfo: Ifo[] = ifosConfig.filter((ifo) => !ifo.isActive)\r\n\r\nconst PastIfo = () => {\r\n  return (\r\n    <IfoLayout>\r\n      {inactiveIfo.map((ifo) =>\r\n        ifo.version === 1 ? (\r\n          <IfoCardV1Data key={ifo.id} ifo={ifo} />\r\n        ) : (\r\n          <IfoCardV2Data key={ifo.id} ifo={ifo} isInitiallyVisible={false} />\r\n        ),\r\n      )}\r\n    </IfoLayout>\r\n  )\r\n}\r\n\r\nexport default PastIfo\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Flex } from '@pancakeswap/uikit'\r\nimport Container from 'components/Layout/Container'\r\nimport Hero from './components/Hero'\r\nimport CurrentIfo from './CurrentIfo'\r\nimport PastIfo from './PastIfo'\r\n\r\nconst Ifos = () => {\r\n  const { t } = useTranslation()\r\n  const { path, url, isExact } = useRouteMatch()\r\n\r\n  return (\r\n    <>\r\n      <Hero />\r\n      <Container>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"32px\">\r\n          <ButtonMenu activeIndex={!isExact ? 1 : 0} scale=\"sm\" variant=\"subtle\">\r\n            <ButtonMenuItem as={Link} to={`${url}`}>\r\n              {t('Next LAUNCHPAD')}\r\n            </ButtonMenuItem>\r\n            <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n              {t('Past LAUNCHPADs')}\r\n            </ButtonMenuItem>\r\n          </ButtonMenu>\r\n        </Flex>\r\n        <Route exact path={`${path}`}>\r\n          <CurrentIfo />\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          <PastIfo />\r\n        </Route>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Ifos\r\n","import React from 'react'\r\nimport {\r\n  TokenPairImage as UIKitTokenPairImage,\r\n  TokenPairImageProps as UIKitTokenPairImageProps,\r\n  TokenImage as UIKitTokenImage,\r\n  ImageProps,\r\n} from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.svg`\r\n}\r\n\r\nexport const TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken, ...props }) => {\r\n  return (\r\n    <UIKitTokenPairImage\r\n      primarySrc={getImageUrlFromToken(primaryToken)}\r\n      secondarySrc={getImageUrlFromToken(secondaryToken)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\ninterface TokenImageProps extends ImageProps {\r\n  token: Token\r\n}\r\n\r\nexport const TokenImage: React.FC<TokenImageProps> = ({ token, ...props }) => {\r\n  return <UIKitTokenImage src={getImageUrlFromToken(token)} {...props} />\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  // display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: () => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async () => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm()\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","var arrayEvery = require('./_arrayEvery'),\n    baseEvery = require('./_baseEvery'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = every;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = arrayEvery;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nmodule.exports = baseEvery;\n"],"sourceRoot":""}