{"version":3,"sources":["components/Layout/Flex.tsx","utils/latinise.ts","components/PageHeader/PageHeader.tsx","components/SearchInput/SearchInput.tsx","components/Select/Select.tsx","components/Loading.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","components/RoiCalculatorModal/useRoiCalculatorReducer.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","components/RoiCalculatorModal/RoiCalculatorFooter.tsx","views/Farms/components/types.ts","components/RoiCalculatorModal/RoiCard.tsx","components/RoiCalculatorModal/AnimatedArrow.tsx","components/RoiCalculatorModal/index.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/TokenImage/index.tsx"],"names":["FlexLayout","styled","div","Latinise","latin_map","τ","Τ","latinise","input","replace","x","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","StyledInput","Input","InputWrapper","mediaQueries","sm","SearchInput","onChangeCallback","onChange","placeholder","useState","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","DropDownHeader","shadows","inset","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onOptionChange","dropdownRef","useRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","useEffect","handleClickOutside","document","addEventListener","removeEventListener","onClick","label","color","ref","map","option","index","selectedIndex","Loading","Wrapper","primary","ExpandableSectionButton","expanded","role","bold","defaultProps","EditingCurrency","CalculatorMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","isTokenOnly","justifyContent","width","height","href","symbol","NofeeTag","variant","outline","startIcon","mr","Flex","MultiplierTag","Tag","CardHeading","multiplier","token","isCommunityFarm","quoteToken","withdrawFee","depositFee","alignItems","mb","TokenImage","primaryToken","secondaryToken","flexDirection","split","ml","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","scale","external","Footer","BulletList","textSubtle","RoiCalculatorFooter","isFarm","apr","displayApr","autoCompoundFrequency","linkLabel","linkHref","performanceFee","isExpanded","setIsExpanded","useTooltip","my","placement","tooltipOffset","multiplierRef","targetRef","multiplierTooltip","multiplierTooltipVisible","tooltipVisible","gridRowCount","apy","getApy","p","prev","px","gridTemplateColumns","gridRowGap","gridTemplateRows","small","textAlign","compoundTimes","display","mt","fee","compoundingIndexToFrequency","ViewMode","initialState","controls","compounding","compoundingFrequency","activeCompoundingIndex","stakingDuration","mode","ROI_BASED_ON_PRINCIPAL","editingCurrency","USD","data","principalAsToken","principalAsUSD","roiUSD","roiTokens","roiPercentage","roiCalculatorReducer","state","action","type","payload","toggledCompounding","PRINCIPAL_BASED_ON_ROI","parseFloat","currencyAfterChange","TOKEN","useRoiCalculatorReducer","stakingTokenPrice","earningTokenPrice","useReducer","dispatch","principalInUSDAsNumber","compoundFrequency","interestBreakdown","getInterestBreakdown","principalInUSD","hasInterest","Number","isNaN","roiAsUSD","getRoi","amountEarned","amountInvested","principalForExpectedRoi","getPrincipalForInterest","principalUSD","principalToken","setPrincipalFromUSDValue","amount","principalAsTokenBN","setPrincipalFromTokenValue","useCallback","principalAsUsdBN","times","principalAsUsdString","setStakingDuration","stakingDurationIndex","toggleCompounding","toggleEditingCurrency","setCompoundingFrequency","setCalculatorMode","modeToSet","setTargetRoi","targetRoiAsTokens","toNumber","MILLION","RoiCardWrapper","radii","default","RoiCardInner","RoiInputContainer","RoiDisplayContainer","RoiDollarAmount","fadeOut","RoiCard","earningTokenSymbol","calculatorState","inputRef","current","focus","onEnterEditing","textTransform","currentTarget","minimumFractionDigits","maximumFractionDigits","rotate","keyframes","ArrowContainer","AnimatedArrow","key","setKey","prevKey","prevId","parseInt","StyledModal","Modal","ScrollableContainer","FullWidthButtonMenu","ButtonMenu","disabled","RoiCalculatorModal","onDismiss","onBack","stakingTokenBalance","stakingTokenSymbol","initialValue","account","useActiveWeb3React","balanceInputRef","assetSymbol","editingUnit","editingValue","conversionUnit","conversionValue","onUserInput","title","headerBackground","asset","currencyValue","innerRef","unit","switchEditingUnits","onFocus","lte","getBalanceNumber","toString","toLocaleUpperCase","activeIndex","onItemClick","flex","checked","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","tokenName","lpPrice","cakePrice","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","annualRoi","formattedAnnualRoi","formatNumber","handleChange","validity","valid","handleSelectMax","plus","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useAppDispatch","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_URL","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","CardActionsContainer","getBscScanLink","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","farmsProps","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","chosenFarmsLength","tokenMode","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","mavrPerBlock","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","src","alt","Page","marginLeft","sort","b","exact","renderContent","getImageUrlFromToken","tokens","wbnb","TokenPairImage","primarySrc","secondarySrc"],"mappings":"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","file":"static/js/11.f79f4b9f.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: block;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <InputWrapper>\r\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n  z-index: 20;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps extends BoxProps {\r\n  options: OptionProps[]\r\n  onOptionChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onOptionChange, ...props }) => {\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0)\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onOptionChange) {\r\n      onOptionChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} {...props}>\r\n      <DropDownHeader onClick={toggling}>\r\n        <Text>{options[selectedOptionIndex].label}</Text>\r\n      </DropDownHeader>\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import styled from 'styled-components'\r\n\r\nconst Loading = styled.div`\r\n  border: 8px solid #f3f3f3;\r\n  border-radius: 50%;\r\n  border-top: 8px solid #ddd;\r\n  border-bottom: 8px solid #ddd;\r\n  width: 20px;\r\n  height: 20px;\r\n  -webkit-animation: spin 2s linear infinite;\r\n  animation: spin 2s linear infinite;\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import { useEffect, useReducer, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from 'utils/compoundApyHelpers'\r\n\r\n/**\r\n * This hook is handling all the calculator state and calculations.\r\n * UI connected to it is merely representation of the data and buttons to trigger actions\r\n */\r\n\r\n// Mapping from the compounding frequency button index to actual compounding frequency\r\n// in number of compounds per day\r\nconst compoundingIndexToFrequency = {\r\n  0: 1,\r\n  1: 0.142857142,\r\n  2: 0.071428571, // once every 7 days\r\n  3: 0.033333333, // once every 30 days\r\n}\r\n\r\nconst TOKEN_PRECISION = 10\r\nconst USD_PRECISION = 2\r\n\r\n// Used to track/react which currency user is editing (i.e. USD amount or Token amount)\r\nexport enum EditingCurrency {\r\n  TOKEN,\r\n  USD,\r\n}\r\n\r\n// Calculator works in 2 modes\r\nexport enum CalculatorMode {\r\n  ROI_BASED_ON_PRINCIPAL, // User edits principal value and sees what ROI they get\r\n  PRINCIPAL_BASED_ON_ROI, // User edits ROI value and sees what principal they need to invest to reach it\r\n}\r\n\r\nexport interface RoiCalculatorReducerState {\r\n  controls: {\r\n    compounding: boolean // Compounding checkbox state\r\n    compoundingFrequency: number // Compounding frequency in number of compounds per day\r\n    activeCompoundingIndex: number // index of active compounding button in ButtonMenu\r\n    stakingDuration: number // index of active staking duration button in ButtonMenu\r\n    mode: CalculatorMode\r\n    editingCurrency: EditingCurrency\r\n  }\r\n  data: {\r\n    principalAsToken: string // Used as value for Inputs\r\n    principalAsUSD: string // Used as value for Inputs\r\n    roiUSD: number\r\n    roiTokens: number\r\n    roiPercentage: number // ROI expressed in percentage relative to principal\r\n  }\r\n}\r\n\r\nconst initialState: RoiCalculatorReducerState = {\r\n  controls: {\r\n    compounding: true,\r\n    compoundingFrequency: 1, // how many compound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\r\n    activeCompoundingIndex: 0, // active compounding selected in\r\n    stakingDuration: 3,\r\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\r\n    editingCurrency: EditingCurrency.USD,\r\n  },\r\n  data: {\r\n    principalAsToken: '0.00',\r\n    principalAsUSD: '',\r\n    roiUSD: 0,\r\n    roiTokens: 0,\r\n    roiPercentage: 0,\r\n  },\r\n}\r\n\r\nconst roiCalculatorReducer = (\r\n  state: RoiCalculatorReducerState,\r\n  action: { type: string; payload?: any },\r\n): RoiCalculatorReducerState => {\r\n  switch (action.type) {\r\n    case 'setStakingDuration': {\r\n      const controls = { ...state.controls, stakingDuration: action.payload }\r\n      return {\r\n        ...state,\r\n        controls,\r\n      }\r\n    }\r\n    case 'toggleCompounding': {\r\n      const toggledCompounding = !state.controls.compounding\r\n      const controls = { ...state.controls, compounding: toggledCompounding }\r\n      return {\r\n        ...state,\r\n        controls,\r\n      }\r\n    }\r\n    case 'setCompoundingFrequency': {\r\n      const { index, autoCompoundFrequency } = action.payload\r\n      if (autoCompoundFrequency) {\r\n        return {\r\n          ...state,\r\n          controls: {\r\n            ...state.controls,\r\n            compoundingFrequency: autoCompoundFrequency,\r\n          },\r\n        }\r\n      }\r\n      const compoundingFrequency = compoundingIndexToFrequency[index]\r\n      const controls = { ...state.controls, compoundingFrequency, activeCompoundingIndex: index }\r\n      return {\r\n        ...state,\r\n        controls,\r\n      }\r\n    }\r\n    case 'setPrincipal': {\r\n      const { principalAsUSD, principalAsToken } = action.payload\r\n      const data = { ...state.data, principalAsUSD, principalAsToken }\r\n      const controls = { ...state.controls, mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL }\r\n      return {\r\n        controls,\r\n        data,\r\n      }\r\n    }\r\n    case 'setPrincipalForTargetRoi': {\r\n      const { principalAsUSD, principalAsToken, roiPercentage } = action.payload\r\n      const data = { ...state.data, principalAsUSD, principalAsToken, roiPercentage }\r\n      return {\r\n        ...state,\r\n        data,\r\n      }\r\n    }\r\n    case 'setCalculatorMode': {\r\n      const mode = action.payload\r\n      const controls = { ...state.controls, mode }\r\n      if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\r\n        const roiUSD = parseFloat(state.data.roiUSD.toFixed(USD_PRECISION))\r\n        const data = { ...state.data, roiUSD }\r\n        return { controls, data }\r\n      }\r\n      return { ...state, controls }\r\n    }\r\n    case 'setRoi': {\r\n      const data = { ...state.data, ...action.payload }\r\n      return { ...state, data }\r\n    }\r\n    case 'setTargetRoi': {\r\n      const { roiUSD, roiTokens } = action.payload\r\n      const data = { ...state.data, roiUSD, roiTokens }\r\n      const controls = { ...state.controls, mode: CalculatorMode.PRINCIPAL_BASED_ON_ROI }\r\n      return { controls, data }\r\n    }\r\n    case 'toggleEditingCurrency': {\r\n      const currencyAfterChange =\r\n        state.controls.editingCurrency === EditingCurrency.USD ? EditingCurrency.TOKEN : EditingCurrency.USD\r\n      const controls = { ...state.controls, editingCurrency: currencyAfterChange }\r\n      return { ...state, controls }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst useRoiCalculatorReducer = (\r\n  stakingTokenPrice: number,\r\n  earningTokenPrice: number,\r\n  apr: number,\r\n  autoCompoundFrequency: number,\r\n  performanceFee: number,\r\n) => {\r\n  const [state, dispatch] = useReducer(roiCalculatorReducer, initialState)\r\n  const { principalAsUSD, roiUSD } = state.data\r\n  const { compounding, compoundingFrequency, stakingDuration, mode } = state.controls\r\n\r\n  // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\r\n  useEffect(() => {\r\n    if (autoCompoundFrequency > 0) {\r\n      dispatch({ type: 'setCompoundingFrequency', payload: { autoCompoundFrequency } })\r\n    }\r\n  }, [autoCompoundFrequency])\r\n\r\n  // Calculates and sets ROI whenever related values change\r\n  useEffect(() => {\r\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\r\n      const principalInUSDAsNumber = parseFloat(principalAsUSD)\r\n      const compoundFrequency = compounding ? compoundingFrequency : 0\r\n      const interestBreakdown = getInterestBreakdown({\r\n        principalInUSD: principalInUSDAsNumber,\r\n        apr,\r\n        earningTokenPrice,\r\n        compoundFrequency,\r\n        performanceFee,\r\n      })\r\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration])\r\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0\r\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0\r\n      const roiPercentage = hasInterest\r\n        ? getRoi({\r\n            amountEarned: roiAsUSD,\r\n            amountInvested: principalInUSDAsNumber,\r\n          })\r\n        : 0\r\n      dispatch({ type: 'setRoi', payload: { roiUSD: roiAsUSD, roiTokens, roiPercentage } })\r\n    }\r\n  }, [principalAsUSD, apr, stakingDuration, earningTokenPrice, performanceFee, compounding, compoundingFrequency, mode])\r\n\r\n  // Calculates and sets principal based on expected ROI value\r\n  useEffect(() => {\r\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\r\n      const principalForExpectedRoi = getPrincipalForInterest(\r\n        roiUSD,\r\n        apr,\r\n        compounding ? compoundingFrequency : 0,\r\n        performanceFee,\r\n      )\r\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration])\r\n        ? principalForExpectedRoi[stakingDuration]\r\n        : 0\r\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice)\r\n      const roiPercentage = getRoi({\r\n        amountEarned: roiUSD,\r\n        amountInvested: principalUSD,\r\n      })\r\n      dispatch({\r\n        type: 'setPrincipalForTargetRoi',\r\n        payload: {\r\n          principalAsUSD: principalUSD.toFixed(USD_PRECISION),\r\n          principalAsToken: principalToken.toFixed(TOKEN_PRECISION),\r\n          roiPercentage,\r\n        },\r\n      })\r\n    }\r\n  }, [stakingDuration, apr, compounding, compoundingFrequency, mode, roiUSD, stakingTokenPrice, performanceFee])\r\n\r\n  // Handler for compounding frequency buttons\r\n  const setCompoundingFrequency = (index: number) => {\r\n    dispatch({ type: 'setCompoundingFrequency', payload: { index } })\r\n  }\r\n\r\n  // Handler for principal input when in USD mode\r\n  const setPrincipalFromUSDValue = (amount: string) => {\r\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice)\r\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(TOKEN_PRECISION) : '0.00'\r\n    dispatch({ type: 'setPrincipal', payload: { principalAsUSD: amount, principalAsToken } })\r\n  }\r\n\r\n  // Handler for principal input when in Token mode\r\n  const setPrincipalFromTokenValue = useCallback(\r\n    (amount: string) => {\r\n      const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice)\r\n      const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(USD_PRECISION) : '0.00'\r\n      dispatch({\r\n        type: 'setPrincipal',\r\n        payload: { principalAsUSD: principalAsUsdString, principalAsToken: amount },\r\n      })\r\n    },\r\n    [stakingTokenPrice],\r\n  )\r\n\r\n  // Handler for staking duration buttons\r\n  const setStakingDuration = (stakingDurationIndex: number) => {\r\n    dispatch({ type: 'setStakingDuration', payload: stakingDurationIndex })\r\n  }\r\n\r\n  // Handler for compounding checkbox\r\n  const toggleCompounding = () => {\r\n    dispatch({ type: 'toggleCompounding' })\r\n  }\r\n\r\n  // Handler for principal input mode switch\r\n  const toggleEditingCurrency = () => {\r\n    dispatch({ type: 'toggleEditingCurrency' })\r\n  }\r\n\r\n  const setCalculatorMode = (modeToSet: CalculatorMode) => {\r\n    dispatch({ type: 'setCalculatorMode', payload: modeToSet })\r\n  }\r\n\r\n  // Handler for ROI input\r\n  const setTargetRoi = (amount: string) => {\r\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice)\r\n    dispatch({\r\n      type: 'setTargetRoi',\r\n      payload: { roiUSD: amount, roiTokens: targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber() },\r\n    })\r\n  }\r\n\r\n  return {\r\n    state,\r\n    setPrincipalFromUSDValue,\r\n    setPrincipalFromTokenValue,\r\n    setStakingDuration,\r\n    toggleCompounding,\r\n    toggleEditingCurrency,\r\n    setCompoundingFrequency,\r\n    setCalculatorMode,\r\n    setTargetRoi,\r\n  }\r\n}\r\n\r\nexport default useRoiCalculatorReducer\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n  isTokenOnly,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      {!isTokenOnly && (<StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>)}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport {\r\n  Tag,\r\n  VerifiedIcon,\r\n  CommunityIcon,\r\n  RefreshIcon,\r\n  AutoRenewIcon,\r\n  TagProps,\r\n  TimerIcon,\r\n  BlockIcon,\r\n  VoteIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst NofeeTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('No Fee')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst VoteNowTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" startIcon={<VoteIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Vote Now')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst SoonTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"binance\" startIcon={<TimerIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Soon')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ClosedTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textDisabled\" startIcon={<BlockIcon width=\"18px\" color=\"textDisabled\" mr=\"4px\" />} {...props}>\r\n      {t('Closed')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, NofeeTag, CommunityTag, DualTag, ManualPoolTag, CompoundingPoolTag, VoteNowTag, SoonTag, ClosedTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { NofeeTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage, TokenImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n  isTokenOnly?: boolean\r\n  depositFee?: string\r\n  withdrawFee?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken, isTokenOnly, depositFee, withdrawFee }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      {\r\n        isTokenOnly ? <TokenImage token={token} width={64} height={64} /> : \r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      }  \r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {withdrawFee === '0%' && withdrawFee ==='0%' ? <NofeeTag /> : null }\r\n          {multiplier ? (\r\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          ) : (\r\n            <Skeleton ml=\"4px\" width={42} height={28} />\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Box, Text, ExpandableLabel, LinkExternal, Grid, HelpIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getApy } from 'utils/compoundApyHelpers'\r\n\r\nconst Footer = styled(Flex)`\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\nconst BulletList = styled.ul`\r\n  list-style-type: none;\r\n  margin-top: 16px;\r\n  padding: 0;\r\n  li {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  li::before {\r\n    content: '•';\r\n    margin-right: 4px;\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n  li::marker {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\ninterface RoiCalculatorFooterProps {\r\n  isFarm: boolean\r\n  apr: number\r\n  displayApr: string\r\n  autoCompoundFrequency: number\r\n  multiplier: string\r\n  linkLabel: string\r\n  linkHref: string\r\n  performanceFee: number\r\n}\r\n\r\nconst RoiCalculatorFooter: React.FC<RoiCalculatorFooterProps> = ({\r\n  isFarm,\r\n  apr,\r\n  displayApr,\r\n  autoCompoundFrequency,\r\n  multiplier,\r\n  linkLabel,\r\n  linkHref,\r\n  performanceFee,\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const { t } = useTranslation()\r\n  const {\r\n    targetRef: multiplierRef,\r\n    tooltip: multiplierTooltip,\r\n    tooltipVisible: multiplierTooltipVisible,\r\n  } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>,\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  const gridRowCount = isFarm ? 4 : 2\r\n  const apy = (getApy(apr, autoCompoundFrequency > 0 ? autoCompoundFrequency : 1, 365, performanceFee) * 100).toFixed(2)\r\n\r\n  return (\r\n    <Footer p=\"16px\" flexDirection=\"column\">\r\n      <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)}>\r\n        {isExpanded ? t('Hide') : t('Details')}\r\n      </ExpandableLabel>\r\n      {isExpanded && (\r\n        <Box px=\"8px\">\r\n          <Grid gridTemplateColumns=\"2.5fr 1fr\" gridRowGap=\"8px\" gridTemplateRows={`repeat(${gridRowCount}, auto)`}>\r\n            {isFarm && (\r\n              <>\r\n                <Text color=\"textSubtle\" small>\r\n                  {t('APR (incl. LP rewards)')}\r\n                </Text>\r\n                <Text small textAlign=\"right\">\r\n                  {displayApr}%\r\n                </Text>\r\n              </>\r\n            )}\r\n            <Text color=\"textSubtle\" small>\r\n              {isFarm ? t('Base APR (CAKE yield only)') : t('APR')}\r\n            </Text>\r\n            <Text small textAlign=\"right\">\r\n              {apr.toFixed(2)}%\r\n            </Text>\r\n            <Text color=\"textSubtle\" small>\r\n              {t('APY (%compoundTimes%x daily compound)', {\r\n                compoundTimes: autoCompoundFrequency > 0 ? autoCompoundFrequency : 1,\r\n              })}\r\n            </Text>\r\n            <Text small textAlign=\"right\">\r\n              {apy}%\r\n            </Text>\r\n            {isFarm && (\r\n              <>\r\n                <Text color=\"textSubtle\" small>\r\n                  {t('Farm Multiplier')}\r\n                </Text>\r\n                <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\r\n                  <Text small textAlign=\"right\" mr=\"4px\">\r\n                    {multiplier}\r\n                  </Text>\r\n                  <span ref={multiplierRef}>\r\n                    <HelpIcon color=\"textSubtle\" width=\"16px\" height=\"16px\" />\r\n                  </span>\r\n                  {multiplierTooltipVisible && multiplierTooltip}\r\n                </Flex>\r\n              </>\r\n            )}\r\n          </Grid>\r\n          <BulletList>\r\n            <li>\r\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                {t('Calculated based on current rates.')}\r\n              </Text>\r\n            </li>\r\n            {isFarm && (\r\n              <li>\r\n                <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                  {t('LP rewards: 0.17% trading fees, distributed proportionally among LP token holders.')}\r\n                </Text>\r\n              </li>\r\n            )}\r\n            <li>\r\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                {t(\r\n                  'All figures are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n                )}\r\n              </Text>\r\n            </li>\r\n            {performanceFee > 0 && (\r\n              <li>\r\n                <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                  {t('All estimated rates take into account this pool’s %fee%% performance fee', {\r\n                    fee: performanceFee,\r\n                  })}\r\n                </Text>\r\n              </li>\r\n            )}\r\n          </BulletList>\r\n          <Flex justifyContent=\"center\" mt=\"24px\">\r\n            <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n          </Flex>\r\n        </Box>\r\n      )}\r\n    </Footer>\r\n  )\r\n}\r\n\r\nexport default RoiCalculatorFooter\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text, Input, CheckmarkIcon, PencilIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\r\n\r\nconst MILLION = 1000000\r\nconst TRILLION = 1000000000000\r\n\r\nconst RoiCardWrapper = styled(Box)`\r\n  background: linear-gradient(180deg, #53dee9, #7645d9);\r\n  padding: 1px;\r\n  width: 100%;\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n`\r\n\r\nconst RoiCardInner = styled(Box)`\r\n  height: 120px;\r\n  padding: 24px;\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst RoiInputContainer = styled(Box)`\r\n  position: relative;\r\n  & > input {\r\n    padding-left: 28px;\r\n    max-width: 70%;\r\n  }\r\n  &:before {\r\n    position: absolute;\r\n    content: '$';\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n    left: 16px;\r\n    top: 8px;\r\n  }\r\n`\r\n\r\nconst RoiDisplayContainer = styled(Flex)`\r\n  max-width: 82%;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst RoiDollarAmount = styled(Text)<{ fadeOut: boolean }>`\r\n  position: relative;\r\n  overflow-x: auto;\r\n  &::-webkit-scrollbar {\r\n    height: 0px;\r\n  }\r\n\r\n  ${({ fadeOut, theme }) =>\r\n    fadeOut &&\r\n    `\r\n      &:after {\r\n        background: linear-gradient(\r\n          to right,\r\n          ${theme.colors.background}00,\r\n          ${theme.colors.background}E6\r\n        );\r\n        content: '';\r\n        height: 100%;\r\n        pointer-events: none;\r\n        position: absolute;\r\n        right: 0;\r\n        top: 0;\r\n        width: 40px;\r\n      }\r\n  `}\r\n`\r\n\r\ninterface RoiCardProps {\r\n  earningTokenSymbol: string\r\n  calculatorState: RoiCalculatorReducerState\r\n  setTargetRoi: (amount: string) => void\r\n  setCalculatorMode: (mode: CalculatorMode) => void\r\n}\r\n\r\nconst RoiCard: React.FC<RoiCardProps> = ({ earningTokenSymbol, calculatorState, setTargetRoi, setCalculatorMode }) => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null)\r\n  const { roiUSD, roiTokens, roiPercentage } = calculatorState.data\r\n  const { mode } = calculatorState.controls\r\n\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [mode])\r\n\r\n  const onEnterEditing = () => {\r\n    setCalculatorMode(CalculatorMode.PRINCIPAL_BASED_ON_ROI)\r\n  }\r\n\r\n  const onExitRoiEditing = () => {\r\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\r\n  }\r\n  const handleExpectedRoiChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTargetRoi(event.currentTarget.value)\r\n  }\r\n  return (\r\n    <RoiCardWrapper>\r\n      <RoiCardInner>\r\n        <Text fontSize=\"12px\" color=\"secondary\" bold textTransform=\"uppercase\">\r\n          {t('ROI at current rates')}\r\n        </Text>\r\n        <Flex justifyContent=\"space-between\" mt=\"4px\" height=\"36px\">\r\n          {mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI ? (\r\n            <>\r\n              <RoiInputContainer>\r\n                <Input\r\n                  ref={inputRef}\r\n                  type=\"number\"\r\n                  inputMode=\"decimal\"\r\n                  pattern=\"\\d*\"\r\n                  scale=\"sm\"\r\n                  value={roiUSD}\r\n                  placeholder=\"0.0\"\r\n                  onChange={handleExpectedRoiChange}\r\n                />\r\n              </RoiInputContainer>\r\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onExitRoiEditing}>\r\n                <CheckmarkIcon color=\"primary\" />\r\n              </IconButton>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <RoiDisplayContainer onClick={onEnterEditing}>\r\n                {/* Dollar sign is separate cause its not supposed to scroll with a number if number is huge */}\r\n                <Text fontSize=\"24px\" bold>\r\n                  $\r\n                </Text>\r\n                <RoiDollarAmount fontSize=\"24px\" bold fadeOut={roiUSD > TRILLION}>\r\n                  {roiUSD.toLocaleString('en', {\r\n                    minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\r\n                    maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\r\n                  })}\r\n                </RoiDollarAmount>\r\n              </RoiDisplayContainer>\r\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onEnterEditing}>\r\n                <PencilIcon color=\"primary\" />\r\n              </IconButton>\r\n            </>\r\n          )}\r\n        </Flex>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          ~ {roiTokens} {earningTokenSymbol} (\r\n          {roiPercentage.toLocaleString('en', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\r\n          %)\r\n        </Text>\r\n      </RoiCardInner>\r\n    </RoiCardWrapper>\r\n  )\r\n}\r\n\r\nexport default RoiCard\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Flex, ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\r\n\r\nconst rotate = keyframes`\r\n  0% {\r\n    transform: scale(1);\r\n    stroke-width: 0;\r\n  }\r\n  50% {\r\n    transform: scale(1.3);\r\n    stroke-width: 2;\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n    stroke-width: 0;\r\n  }\r\n`\r\n\r\nconst ArrowContainer = styled(Flex)`\r\n  & > svg {\r\n    animation: 0.2s ${rotate} linear;\r\n    stroke: ${({ theme }) => `${theme.colors.primary}3D`};\r\n    stroke-width: 0;\r\n  }\r\n`\r\n\r\ninterface AnimatedArrowProps {\r\n  calculatorState: RoiCalculatorReducerState\r\n}\r\n\r\nconst AnimatedArrow: React.FC<AnimatedArrowProps> = ({ calculatorState }) => {\r\n  const [key, setKey] = useState('roiArrow-0')\r\n  const { mode } = calculatorState.controls\r\n\r\n  // Trigger animation on state change\r\n  useEffect(() => {\r\n    setKey((prevKey) => {\r\n      const prevId = parseInt(prevKey.split('-')[1], 10)\r\n      return `roiArrow-${prevId + 1}`\r\n    })\r\n  }, [calculatorState])\r\n\r\n  return (\r\n    <ArrowContainer justifyContent=\"center\" my=\"24px\" key={key}>\r\n      {mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL ? (\r\n        <ArrowDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n      ) : (\r\n        <ArrowUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n      )}\r\n    </ArrowContainer>\r\n  )\r\n}\r\n\r\nexport default AnimatedArrow\r\n","import React, { useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  ButtonMenu,\r\n  Checkbox,\r\n  BalanceInput,\r\n  HelpIcon,\r\n  ButtonMenuItem,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport RoiCalculatorFooter from './RoiCalculatorFooter'\r\nimport RoiCard from './RoiCard'\r\nimport useRoiCalculatorReducer, { CalculatorMode, EditingCurrency } from './useRoiCalculatorReducer'\r\nimport AnimatedArrow from './AnimatedArrow'\r\n\r\ninterface RoiCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  onBack?: () => void\r\n  earningTokenPrice: number\r\n  apr: number\r\n  displayApr?: string\r\n  linkLabel: string\r\n  linkHref: string\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenSymbol: string\r\n  stakingTokenPrice: number\r\n  earningTokenSymbol?: string\r\n  multiplier?: string\r\n  autoCompoundFrequency?: number\r\n  performanceFee?: number\r\n  isFarm?: boolean\r\n  initialValue?: string\r\n}\r\n\r\nconst StyledModal = styled(Modal)`\r\n  width: 345px;\r\n  & > :nth-child(2) {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ScrollableContainer = styled.div`\r\n  padding: 24px;\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    max-height: none;\r\n  }\r\n`\r\n\r\nconst FullWidthButtonMenu = styled(ButtonMenu)<{ disabled?: boolean }>`\r\n  width: 100%;\r\n\r\n  & > button {\r\n    width: 100%;\r\n  }\r\n\r\n  opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};\r\n`\r\n\r\nconst RoiCalculatorModal: React.FC<RoiCalculatorModalProps> = ({\r\n  onDismiss,\r\n  onBack,\r\n  earningTokenPrice,\r\n  apr,\r\n  displayApr,\r\n  linkLabel,\r\n  linkHref,\r\n  stakingTokenBalance,\r\n  stakingTokenSymbol,\r\n  stakingTokenPrice,\r\n  multiplier,\r\n  initialValue,\r\n  earningTokenSymbol = 'MAVR',\r\n  autoCompoundFrequency = 0,\r\n  performanceFee = 0,\r\n  isFarm = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useActiveWeb3React()\r\n  const balanceInputRef = useRef<HTMLInputElement | null>(null)\r\n\r\n  const {\r\n    state,\r\n    setPrincipalFromUSDValue,\r\n    setPrincipalFromTokenValue,\r\n    setStakingDuration,\r\n    toggleCompounding,\r\n    toggleEditingCurrency,\r\n    setCompoundingFrequency,\r\n    setCalculatorMode,\r\n    setTargetRoi,\r\n  } = useRoiCalculatorReducer(stakingTokenPrice, earningTokenPrice, apr, autoCompoundFrequency, performanceFee)\r\n\r\n  const { compounding, activeCompoundingIndex, stakingDuration, editingCurrency } = state.controls\r\n  const { principalAsUSD, principalAsToken } = state.data\r\n\r\n  // Auto-focus input on opening modal\r\n  useEffect(() => {\r\n    if (balanceInputRef.current) {\r\n      balanceInputRef.current.focus()\r\n    }\r\n  }, [])\r\n\r\n  // If user comes to calculator from staking modal - initialize with whatever they put in there\r\n  useEffect(() => {\r\n    if (initialValue) {\r\n      setPrincipalFromTokenValue(initialValue)\r\n    }\r\n  }, [initialValue, setPrincipalFromTokenValue])\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    isFarm\r\n      ? t('“My Balance” here includes both LP Tokens in your wallet, and LP Tokens already staked in this farm.')\r\n      : t(\r\n          '“My Balance” here includes both %assetSymbol% in your wallet, and %assetSymbol% already staked in this pool.',\r\n          { assetSymbol: stakingTokenSymbol },\r\n        ),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  const onBalanceFocus = () => {\r\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\r\n  }\r\n\r\n  const editingUnit = editingCurrency === EditingCurrency.TOKEN ? stakingTokenSymbol : 'USD'\r\n  const editingValue = editingCurrency === EditingCurrency.TOKEN ? principalAsToken : principalAsUSD\r\n  const conversionUnit = editingCurrency === EditingCurrency.TOKEN ? 'USD' : stakingTokenSymbol\r\n  const conversionValue = editingCurrency === EditingCurrency.TOKEN ? principalAsUSD : principalAsToken\r\n  const onUserInput = editingCurrency === EditingCurrency.TOKEN ? setPrincipalFromTokenValue : setPrincipalFromUSDValue\r\n\r\n  return (\r\n    <StyledModal\r\n      title={t('ROI Calculator')}\r\n      onDismiss={onBack || onDismiss}\r\n      onBack={onBack ?? null}\r\n      headerBackground=\"gradients.cardHeader\"\r\n    >\r\n      <ScrollableContainer>\r\n        <Flex flexDirection=\"column\" mb=\"8px\">\r\n          <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n            {t('%asset% staked', { asset: stakingTokenSymbol })}\r\n          </Text>\r\n          <BalanceInput\r\n            currencyValue={`${conversionValue} ${conversionUnit}`}\r\n            innerRef={balanceInputRef}\r\n            placeholder=\"0.00\"\r\n            value={editingValue}\r\n            unit={editingUnit}\r\n            onUserInput={onUserInput}\r\n            switchEditingUnits={toggleEditingCurrency}\r\n            onFocus={onBalanceFocus}\r\n          />\r\n          <Flex justifyContent=\"space-between\" mt=\"8px\">\r\n            <Button\r\n              scale=\"xs\"\r\n              p=\"4px 16px\"\r\n              width=\"68px\"\r\n              color=\"#FFF\"\r\n              onClick={() => setPrincipalFromUSDValue('100')}\r\n            >\r\n              $100\r\n            </Button>\r\n            <Button\r\n              scale=\"xs\"\r\n              p=\"4px 16px\"\r\n              width=\"68px\"\r\n              color=\"#FFF\"\r\n              onClick={() => setPrincipalFromUSDValue('1000')}\r\n            >\r\n              $1000\r\n            </Button>\r\n            <Button\r\n              disabled={stakingTokenBalance.lte(0) || !account}\r\n              scale=\"xs\"\r\n              p=\"4px 16px\"\r\n              width=\"128px\"\r\n              color=\"#FFF\"\r\n              onClick={() =>\r\n                setPrincipalFromUSDValue(getBalanceNumber(stakingTokenBalance.times(stakingTokenPrice)).toString())\r\n              }\r\n            >\r\n              {t('My Balance').toLocaleUpperCase()}\r\n            </Button>\r\n            <span ref={targetRef}>\r\n              <HelpIcon width=\"16px\" height=\"16px\" color=\"textSubtle\" />\r\n            </span>\r\n            {tooltipVisible && tooltip}\r\n          </Flex>\r\n          <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n            {t('Staked for')}\r\n          </Text>\r\n          <FullWidthButtonMenu activeIndex={stakingDuration} onItemClick={setStakingDuration} scale=\"sm\">\r\n            <ButtonMenuItem color=\"#FFF\">{t('1D')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"text\">{t('7D')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"text\">{t('30D')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"text\">{t('1Y')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"text\">{t('5Y')}</ButtonMenuItem>\r\n          </FullWidthButtonMenu>\r\n          {autoCompoundFrequency === 0 && (\r\n            <>\r\n              <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n                {t('Compounding every')}\r\n              </Text>\r\n              <Flex alignItems=\"center\">\r\n                <Flex flex=\"1\">\r\n                  <Checkbox scale=\"sm\" checked={compounding} onChange={toggleCompounding} />\r\n                </Flex>\r\n                <Flex flex=\"6\">\r\n                  <FullWidthButtonMenu\r\n                    disabled={!compounding}\r\n                    activeIndex={activeCompoundingIndex}\r\n                    onItemClick={setCompoundingFrequency}\r\n                    scale=\"sm\"\r\n                  >\r\n                    <ButtonMenuItem>{t('1D')}</ButtonMenuItem>\r\n                    <ButtonMenuItem>{t('7D')}</ButtonMenuItem>\r\n                    <ButtonMenuItem>{t('14D')}</ButtonMenuItem>\r\n                    <ButtonMenuItem>{t('30D')}</ButtonMenuItem>\r\n                  </FullWidthButtonMenu>\r\n                </Flex>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Flex>\r\n        <AnimatedArrow calculatorState={state} />\r\n        <Flex>\r\n          <RoiCard\r\n            earningTokenSymbol={earningTokenSymbol}\r\n            calculatorState={state}\r\n            setTargetRoi={setTargetRoi}\r\n            setCalculatorMode={setCalculatorMode}\r\n          />\r\n        </Flex>\r\n      </ScrollableContainer>\r\n      <RoiCalculatorFooter\r\n        isFarm={isFarm}\r\n        apr={apr}\r\n        displayApr={displayApr}\r\n        autoCompoundFrequency={autoCompoundFrequency}\r\n        multiplier={multiplier}\r\n        linkLabel={linkLabel}\r\n        linkHref={linkHref}\r\n        performanceFee={performanceFee}\r\n      />\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default RoiCalculatorModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  isTokenOnly,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={isTokenOnly ? t('Stake') : t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\r\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </AnnualRoiContainer>\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', isTokenOnly }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={isTokenOnly ? t('Unstake tokens') : t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n  isTokenOnly,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName, isTokenOnly)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n      isTokenOnly={isTokenOnly}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {isTokenOnly ? t('Stake') : t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"backgroundAlt\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"backgroundAlt\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'MAVR' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(lpContract, 'approve', [\r\n        masterChefContract.address,\r\n        ethers.constants.MaxUint256,\r\n      ])\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, token } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isTokenOnly={farm.isTokenOnly}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          MAVR\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('MAVR + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = farm.isTokenOnly ? `${BASE_URL}/swap?outputCurrency=${getAddress(farm.token.address)}` : `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.isTokenOnly ? getAddress(farm.token.address) : getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'MAVR'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          depositFee={farm.depositFee}\r\n          withdrawFee={farm.withdrawFee}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        {/* <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Deposit Fee')}:</Text>\r\n          {farm.depositFee ? (\r\n              <Text bold>{farm.depositFee}</Text>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n          )}\r\n        </Flex> */}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Withdraw Fee')}:</Text>\r\n          {farm.withdrawFee ? (\r\n              <Text bold>{farm.withdrawFee}</Text>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n          )}\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n            isTokenOnly={farm.isTokenOnly}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage, TokenImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid, isTokenOnly }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        {\r\n          isTokenOnly ? \r\n          <TokenImage token={token} width={64} height={64} /> : \r\n          <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n        } \r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          MAVR\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n  isTokenOnly\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol, isTokenOnly)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n      isTokenOnly={isTokenOnly}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol}  isTokenOnly={isTokenOnly}/>,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {isTokenOnly ? t('Stake') : t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { NofeeTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 50px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.isTokenOnly ? getAddress(token.address) : getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n  const addLiquidityUrl = farm.isTokenOnly ? `${BASE_URL}/swap?outputCurrency=${getAddress(farm.token.address)}` : `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={addLiquidityUrl}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        {!farm.isTokenOnly && (<StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>)}\r\n      </InfoContainer>\r\n      <TagsContainer>\r\n          {farm.depositFee === '0%' && farm.withdrawFee === '0%'? <NofeeTag /> :\r\n          <div>\r\n            {/* {farm.depositFee !== '0%' ? <Text>{t('Deposit Fee')}:{farm.depositFee}</Text> : null} */}\r\n            {farm.withdrawFee !== '0%' ?<Text>{t('Withdraw Fee')}:{farm.withdrawFee}</Text> : null}\r\n          </div>\r\n          }\r\n      </TagsContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex, } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  // if (cakeRewardsApr && lpRewardsApr) {\r\n  //   return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  // }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n  const {tokenMode} = farmsProps;\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = farm.isTokenOnly ? new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice) : new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.mavrPerBlock))\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n        isTokenOnly: farm.isTokenOnly\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"orange\" mb=\"24px\">\r\n          {tokenMode ? <img src=\"/images/new/icon4.png\" alt=\"Pools\" style={{\"paddingRight\":\"10px\", \"height\":\"40px\"}}/> : <img src=\"/images/new/icon3.png\" alt=\"Farms\" style={{\"paddingRight\":\"10px\", \"height\":\"50px\"}}/>}\r\n          {tokenMode ? t('Pools') : t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {tokenMode ? t('Stake Single token to earn.') : t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text color='red'> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\" color='red'>{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\" color='red'>{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React from 'react'\r\nimport {\r\n  TokenPairImage as UIKitTokenPairImage,\r\n  TokenPairImageProps as UIKitTokenPairImageProps,\r\n  TokenImage as UIKitTokenImage,\r\n  ImageProps,\r\n} from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.svg`\r\n}\r\n\r\nexport const TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken, ...props }) => {\r\n  return (\r\n    <UIKitTokenPairImage\r\n      primarySrc={getImageUrlFromToken(primaryToken)}\r\n      secondarySrc={getImageUrlFromToken(secondaryToken)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\ninterface TokenImageProps extends ImageProps {\r\n  token: Token\r\n}\r\n\r\nexport const TokenImage: React.FC<TokenImageProps> = ({ token, ...props }) => {\r\n  return <UIKitTokenImage src={getImageUrlFromToken(token)} {...props} />\r\n}\r\n"],"sourceRoot":""}